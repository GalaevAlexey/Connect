// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

/// NJOAllowedCharacterRule checks if the password only has allowed characters.
SWIFT_CLASS("_TtC6Navajo23NJOAllowedCharacterRule")
@interface NJOAllowedCharacterRule : NSObject
@property (nonatomic, copy) NSCharacterSet * _Nullable disallowedCharacters;
/// Initialize with an NSCharacterSet object.
- (nonnull instancetype)initWithCharacterSet:(NSCharacterSet * _Nonnull)characterSet;
/// Evaluate password. Return false if it is passed and true if failed.
- (BOOL)evaluate:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
/// Error description.
/// Localization Key - “NAVAJO_ALLOWED_CHARACTER_ERROR”
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedErrorDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// NJOBlockRule checks password with a block which gets a string and returns a bool value.
SWIFT_CLASS("_TtC6Navajo12NJOBlockRule")
@interface NJOBlockRule : NSObject
@property (nonatomic, copy) BOOL (^ _Nullable evaluation)(NSString * _Nonnull);
/// Initialize with a Block.
- (nonnull instancetype)initWithEvaluation:(BOOL (^ _Nonnull)(NSString * _Nonnull))evaluation;
/// Evaluate password. Return false if it is passed and true if failed.
- (BOOL)evaluate:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
/// Error description.
/// Localization Key - “NAVAJO_BLOCK_ERROR”
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedErrorDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// NJODictionaryWordRule checks if the password can be found on the OSX or iOS dictionary.
SWIFT_CLASS("_TtC6Navajo21NJODictionaryWordRule")
@interface NJODictionaryWordRule : NSObject
/// Evaluate password. Return false if it is passed and true if failed.
- (BOOL)evaluate:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
/// Error description.
/// Localization Key - “NAVAJO_DICTIONARYWORD_ERROR”
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedErrorDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// NJOLengthRule checks the length of password.
SWIFT_CLASS("_TtC6Navajo13NJOLengthRule")
@interface NJOLengthRule : NSObject
/// Initialize with minimum and maximum values.
- (nonnull instancetype)initWithMin:(NSInteger)min max:(NSInteger)max;
/// Evaluate password. Return false if it is passed and true if failed.
- (BOOL)evaluate:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
/// Error description.
/// Localization Key - “NAVAJO_LENGTH_ERROR”
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedErrorDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// NJOPasswordValidator validates passwords with custom rules.
SWIFT_CLASS("_TtC6Navajo20NJOPasswordValidator")
@interface NJOPasswordValidator : NSObject
/// NJOPasswordValidator object which checks if the length of password is between 6 and 24.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NJOPasswordValidator * _Nonnull standardValidator;)
+ (NJOPasswordValidator * _Nonnull)standardValidator SWIFT_WARN_UNUSED_RESULT;
/// Length rule having minimum of 6 and maximum of 24.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NJOLengthRule * _Nonnull standardLengthRule;)
+ (NJOLengthRule * _Nonnull)standardLengthRule SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSPredicate;

/// NJOPredicateRule checks password with a NSPredicate object.
SWIFT_CLASS("_TtC6Navajo16NJOPredicateRule")
@interface NJOPredicateRule : NSObject
@property (nonatomic, strong) NSPredicate * _Nullable predicate;
/// Initialize with an NSPredicate object.
- (nonnull instancetype)initWithPredicate:(NSPredicate * _Nonnull)predicate;
/// Evaluate password. Return false if it is passed and true if failed.
- (BOOL)evaluate:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
/// Error description.
/// Localization Key - “NAVAJO_PREDICATE_ERROR”
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedErrorDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSRegularExpression;

/// NJORegularExpressionRule checks password with a NSRegularExpression object.
SWIFT_CLASS("_TtC6Navajo24NJORegularExpressionRule")
@interface NJORegularExpressionRule : NSObject
@property (nonatomic, strong) NSRegularExpression * _Nullable regularExpression;
/// Initialize with an NSRegularExpression object.
- (nonnull instancetype)initWithRegularExpression:(NSRegularExpression * _Nonnull)regularExpression;
/// Evaluate password. Return false if it is passed and true if failed.
- (BOOL)evaluate:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
/// Error description.
/// Localization Key - “NAVAJO_REGEX_ERROR”
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedErrorDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// NJORequiredCharacterRule checks if the password contains at least one required character.
SWIFT_CLASS("_TtC6Navajo24NJORequiredCharacterRule")
@interface NJORequiredCharacterRule : NSObject
@property (nonatomic, copy) NSCharacterSet * _Nullable requiredCharacterSet;
/// Initialize with an NSCharacterSet object.
- (nonnull instancetype)initWithCharacterSet:(NSCharacterSet * _Nonnull)characterSet;
/// Evaluate password. Return false if it is passed and true if failed.
- (BOOL)evaluate:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
/// Error description.
/// Localization keys
/// <ul>
///   <li>
///     Lowercase error “NAVAJO_REQUIRED_CHARACTER_LOWERCASE_ERROR”
///   </li>
///   <li>
///     Uppercase error “NAVAJO_REQUIRED_CHARACTER_UPPERCASE_ERROR”
///   </li>
///   <li>
///     Decimal digit error “NAVAJO_REQUIRED_CHARACTER_DECIMAL_DIGIT_ERROR”
///   </li>
///   <li>
///     Symbol error “NAVAJO_REQUIRED_CHARACTER_SYMBOL_ERROR”
///   </li>
///   <li>
///     Default error “NAVAJO_REQUIRED_CHARACTER_REQUIRED_ERROR”
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedErrorDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Navajo validates strength of passwords.
SWIFT_CLASS("_TtC6Navajo6Navajo")
@interface Navajo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
